#########################################
# Question 1a - do not delete this comment
#########################################
import math

def map_bin2dec(n):
    dicti ={}
    for i in range(1,n+1):
        largest_here = '1'*i
        largest_before = '1'*(i-1)
        decimal_max = int(largest_here,2)
        if i-1 == 0:
            decimal_min = 0
        else:
            decimal_min = int(largest_before,2)
            
        for j in range(decimal_min,decimal_max+1):
            binary_for_j = bin(j)[2:]
            dicti[binary_for_j] = str(j)

    return dicti
    

            

    
#########################################
# Question 1b - do not delete this comment
#########################################

def bin_triplets_to_decimal(bin_str):
    x = len(bin_str)
    new_dicti = map_bin2dec(3)
    minim = 0
    number = ''
    for i in range(x+1):
        if i%3 == 0 and not i == 0:
            if (bin_str[minim]) == '0':
                if (bin_str[minim+1]) == '0':
                    if bin_str[i] == '0':
                        number_here = '0'
                    else:
                        number_here = '1'
                else:
                    number_here = new_dicti.get(bin_str[minim+1:i])
            else:
                number_here = new_dicti.get(bin_str[minim:i])
            minim = i
            number += number_here

    return number
    



#########################################
# Question 2a - do not delete this comment
#########################################

def swap_student_courses(students_dict):
    courses_to_student = {}
    x = students_dict.values()
    y = students_dict.keys()
    students = []
    for i in range(len(y)):
        for j in range(len(x[i])):
            if x[i][j] in courses_to_student:
                z = courses_to_student.get(x[i][j])
                z.append(y[i])
                courses_to_student[x[i][j]] = z
            else:
                students = [y[i]]
                courses_to_student[x[i][j]] = students
            
            
        
    return courses_to_student
    
    
#########################################
# Question 2b - do not delete this comment
#########################################

def count_courses_intersection(courses_dict):
    x = courses_dict.keys()
    y = courses_dict.values()
    
    new_dict = {}
    length = len(courses_dict)
    for i in range(length):
        for j in range(i+1,length):
            new_tuple = (x[i],x[j])
            sums = 0
            for r in range(len(y[i])):
                for t in range(len(y[j])):
                    if y[i][r] == y[j][t]:
                        sums +=1
                    new_dict[new_tuple] = sums


    return new_dict
            
            
        



    
#########################################
# Question 3a - do not delete this comment
#########################################

def find_following_words(text):
    word_startind = 0
    dicti = {}
    lst = []
    for i in range(len(text)):
        last_char = len(text[0:i])
        if text[i].isspace() == True:
            word = text[word_startind:last_char]
            lst.append(word.lower())
            word_startind = i+1
    last_word = text[word_startind:]
    lst.append(last_word.lower())

    shadow_list = lst + []
    for k in range(len(lst)):
        
        new_lst = []
        len_word = len(lst[k])
        for j in shadow_list:
            if j[0] == lst[k][len_word-1]:
                if lst[k] in dicti:
                    if j not in new_lst:
                        new_lst.append(j)

                else:
                    new_lst = [j]
                if j in shadow_list:
                    shadow_list.remove(j)
                sorted_list = sorted(new_lst)
                dicti[lst[k]]=sorted_list
    for j in range(len(lst)):
        if lst[j] not in dicti:
            dicti[lst[j]] = []
    return dicti



#########################################
# Question 3b - do not delete this comment
#########################################

def play_word_chain(text, word):
    d = find_following_words(text)
    e = d.items()
    f = d.keys()
    new_list = []
    len_word = len(word)
    new_dicti = d.copy()
    
    print word.lower()
    f.remove(word.lower())
    for i in range(len(e)):
        len_word = len(word)
        if word[len_word-1].lower() == e[i][0][0].lower() and not word == e[i][0].lower():
            word = e[i][0]
            print word.lower()
            f.remove(e[i][0])
    for j in f:
        len_word = len(word)
        if j[0] == word[len_word-1]:
            word = j
            print word.lower()
            f.remove(j)
    for j in f:
        len_word = len(word)
        if j[0] == word[len_word-1]:
            word = j
            print word.lower()
            f.remove(j)    
    for j in f:
        len_word = len(word)
        if j[0] == word[len_word-1]:
            word = j
            print word.lower()
            f.remove(j)            

    return f


    
#########################
# main code - do not delete this comment
# You can add more validation cases below
#########################

print map_bin2dec(1)
print map_bin2dec(2)
print map_bin2dec(3)
print map_bin2dec(4)

print bin_triplets_to_decimal("001111")
print bin_triplets_to_decimal("110011")
print bin_triplets_to_decimal("111000111")
print bin_triplets_to_decimal("111")

print swap_student_courses({"Yuval": ["Math", "Computer Science", "Statistics"],\
                      "Gal": ["Algebra", "Statistics", "Physics"],\
                      "Noam": ["Statistics", "Math", "Programming"]})

print count_courses_intersection({'Bible': ['Daniel', 'Roni'],\
                                  'Psychology': ['Roni'], 'Biology': ['Daniel']})
print count_courses_intersection({'Bible': ['Daniel', 'Roni','Yossi'],\
                                  'Psychology': ['Roni','Yossi'], 'Biology': ['Daniel'],\
                                  'Physics':['Roni', 'Michael', 'Yossi', 'Daniel']})


print find_following_words("The little girl sings a Song sa si su as")

unused_words = play_word_chain("The little girl sings a Song", "sings")
print unused_words

unused_words = play_word_chain("The little girl sings a Song", "tHe")
print unused_words
